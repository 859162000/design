<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd">

	<!-- 配置文件 -->
	<util:properties id="jdbc" 
		location="classpath:jdbc.properties"/>
		
	<!-- 配置文件 -->
	<util:properties id="hr" 
		location="classpath:synchronize.properties"/>
	
	
	<!-- 配置sqlServerTemplate -->
	<bean id="sqlServerJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	 	<property name="dataSource" ref="sqlserverDataSource"></property>
	</bean>
	
	<!-- 配置jdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	 	<property name="dataSource" ref="dataSource"></property>
	</bean>
 
	<!-- 定义组织机构人员数据源 -->
	<bean id="sqlserverDataSource" 
		class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="url" value="#{hr.jtdsUrl}"/>
		<property name="driverClassName" value="#{hr.jtdsDriver}"/>
		<property name="username" value="#{hr.sqlServerUser}"/>
		<property name="password" value="#{hr.sqlServerPassword}"/>
	</bean>
	
	<!-- 定义数据源 -->
	<bean id="dataSource" 
		class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="url" value="#{jdbc.url}"/>
		<property name="driverClassName" value="#{jdbc.driver}"/>
		<property name="username" value="#{jdbc.user}"/>
		<property name="password" value="#{jdbc.password}"/>
	</bean>
	
	<!-- 定义实体管理器工厂
         Jpa配置   LocalContainerEntityManagerFactoryBean这个选项Spring扮演了容器的角色。完全掌管JPA
		  点我查看 spring生成EntityManagerFactory的三种方式 -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
       	<!-- 指定数据源 -->
	    <property name="dataSource" ref="dataSource"/>
		<!-- 指定Jpa持久化实现厂商类,这里以Hibernate为例 -->
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
		<!-- 指定Entity实体类包路径 -->
		<property name="packagesToScan" >
        	<array>
        		<value>org.wanwan.flower.**.model</value>
        	</array>
        </property>
        <!-- 指定JPA属性；如Hibernate中指定是否显示SQL的是否显示、方言等 -->
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>
                <prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">validate</prop>
            </props>
        </property>
    </bean>
    
    <!-- 重要配置：启用扫描并自动创建代理的功能  -->
    <jpa:repositories base-package="org.wanwan.flower.login"  transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory"/>
	
    <!-- Hibernate对Jpa的实现 -->
    <bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
    
	<!-- Jpa 事务管理器  -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
	 
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.Oracle9Dialect
				</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		
		<!--当然也可以不使用上面这种指定的方式，而使用包扫描的方式做为替换，推荐这种-->
		<property name="packagesToScan">
			<value>org.wanwan.flower.**.model</value>
		</property>
	 
	</bean>
  
	<context:annotation-config />  
   	<!-- 启用类扫描机制，通过元数据配置Service,自动查找@Component、@Resource、@Service、@Controller(包括且不限于)等Bean并自动注入 -->
	<context:component-scan base-package="org.wanwan.flower" />
	  
	<!-- 开启MVC注解扫描-->
	<mvc:annotation-driven />
	
	<!-- 用注解来实现事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 开启aop注解扫描 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
</beans>