1，使用插件
	1.1jetty:run
	1.2tomcat7:run
2，clean package打包
	<plugin>  
		<groupId>org.apache.maven.plugins</groupId>  
		<artifactId>maven-jar-plugin</artifactId>  
		<version>2.4</version>  
		<configuration>  
			<archive>  
				<manifest>  
					<addClasspath>true</addClasspath>  
					<classpathPrefix>lib/</classpathPrefix>  
					<mainClass>com.sysware.HelloWorld</mainClass>  
				</manifest>  
			</archive>  
		</configuration>  
	</plugin> 
	2.1clean deploy 		发布到私服
	2.2assembly:assembly	打包zip

3，groupID对应java里面的package，artifactId对应lib里面的jar包名字

4，帮助与查阅地址：http://maven.apache.org/plugins/index.html

5，maven里面的插件如果不行了，就删除等待其重新下载。

6，jetty:run 使用jetty做容器
	6.1简单版
	<build>
        <finalName>ROOT</finalName>
        	<plugins>
		<plugin>
		        <groupId>org.mortbay.jetty</groupId>
		        <artifactId>maven-jetty-plugin</artifactId>
		        <version>6.1.10</version>
		        
		</plugin>
		</plugins>
	</build>
	6.2复杂版
	<plugin>
		<groupId>org.mortbay.jetty</groupId>
		<artifactId>maven-jetty-plugin</artifactId>
		<version>6.1.10</version>
		<configuration>      
			<webDefaultXml>src/main/resources/jetty/webdefault.xml</webDefaultXml>   
		</configuration>   
	</plugin> 

7，更改jetty端口：mvn -Djetty.port=10086 jetty:run

8，安装自定义依赖
	8.1pom.xml
 	<groupId>com.microsoft.sqlserver</groupId>
	<artifactId>sqljdbc4</artifactId>
	<version>4.0</version>
	8.2安装sqlserver
	mvn install:install-file -Dfile=sqljdbc4.jar -Dpackaging=jar -DgroupId=com.microsoft.sqlserver -DartifactId=sqljdbc4 -Dversion=4.0
	8.3安装oracle & dubbo
	mvn install:install-file -DgroupId=oracle -DartifactId=ojdbc -Dversion=6 -Dpackaging=jar -Dfile=D:\data\jar\ojdbc6.jar
	mvn install:install-file -DgroupId=com.alibaba -DartifactId=dubbo -Dversion=2.8.4 -Dpackaging=jar -Dfile=E:\design\dubbo\dubbo-2.8.4.jar
	
	8.4自定义
	mvn install:install-file -Dfile=my-jar.jar -DgroupId=org.richard -DartifactId=my-jar -Dversion=1.0 -Dpackaging=jar
	8.5路径为com.oracle的库可以将版本里面的内容全拷贝后，放到路径为oracle后继续使用

9，maven中央仓库

    1. http://www.sonatype.org/nexus/
    2. http://mvnrepository.com/ （本人推荐仓库）
    3. http://repo1.maven.org/maven2
	9.1 私服
		定义：私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务，私服代理广域网上的远程仓库，供局域网内的Maven用户使用。
		机制：当Maven需要下载构件的时候，它从私服请求，如果私服上没有，则获取外部远程仓库，并缓存在私服上，再为Maven的下载服务。
		特殊：我们还可以把一些无法从外部仓库下载到的构件上传到私服上。
		
	9.2主流私服：
		9.2.1，Apache的Archiva
		9.2.2，JFrog的Artifactory
		9.2.3，Sonatype的Nexus		http://www.sonatype.org/nexus/go 

10，quartz安装
	<dependency>
		<groupId>org.quartz-scheduler</groupId>
		<artifactId>quartz</artifactId>
		<version>2.1.1</version>
	</dependency>

11，视频地址
	http://pan.baidu.com/s/1nt0yeJB#path=%252F
	
12，build与exclusion排除相关
	12.1排除指定目录资源
	<resources>
		<resource>
			<directory>${basedir}/src/main/resources</directory>
			<excludes>
				<exclude>*</exclude>
			</excludes>
		</resource>
	</resources>
	12.2exclusions排除某个jar包
	<dependency> 
		<groupId>org.hibernate</groupId> 
		<artifactId>hibernate</artifactId> 
		<version>3.2.5.ga</version> 
		<exclusions> 
			<exclusion> 
				<groupId>javax.transaction</groupId> 
				<artifactId>jta</artifactId> 
			</exclusion> 
		</exclusions> 
	</dependency>

	12.2build编译
	<pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <configuration>
                        <source>1.7</source>
                        <target>1.7</target>
                        <compilerArguments>
                            <verbose />
                            <bootclasspath>${java.home}/lib/rt.jar</bootclasspath>
                        </compilerArguments>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
	
13，setting.xml用于配置远程仓库的地址
	<mirror>
		  <id>snapshots</id>
		  <mirrorOf>*</mirrorOf>
		  <name>Snapshots</name>
		  <url>http://192.168.156.25:8081/nexus/content/groups/public/</url>
    	</mirror> 
	
	13.1http://repo1.maven.org/maven2 推荐地址1
	
14，maven库编译到target下面的插件：org.apache.maven.plugins:maven-dependency-plugin:2.10:copy-dependencies

15，mvn assembly:assembly
	将已经生成的target目录下的jar包与maven引用的jar包合并成一个zip包

16，相互依赖，直接将一个项目的三维放到pom里面――实际上是从私服上提取
	<dependency>
		<groupId>com.chinamobile.iot.udm</groupId>
		<artifactId>udm-plugin-avro</artifactId>
		<version>1.0-SNAPSHOT</version>
	</dependency>

17，Extensions 如果报错用<pluginManagement/>包围起来

19，私服搭建
	19.1将本地jar发布到私服中央仓库的代码，这段代码可能会让本地pom引用这个jar的时候报错，需要发布后删除
	<distributionManagement>
		<snapshotRepository>
			<id>snapshots</id>
			<name>Rnapshots</name>
			<url>http://localhost:8081/nexus/content/repositories/snapshots/</url> 
			<uniqueVersion>true</uniqueVersion>
		</snapshotRepository>
		<repository>
			<id>releases</id>
			<name>Releases</name>
			<url>http://localhost:8081/nexus/content/repositories/releases/</url>
		</repository>
	</distributionManagement>
	
	19.2私服账号密码admin/admin123
	19.3id与url必须一一对应
		<id>snapshots</id>
		<url>http://192.168.156.25:8081/nexus/content/groups/public/</url>
	19.4nexus下载与安装
	19.5控制台http://localhost:8081/nexus, http://192.168.156.25:8081/nexus/#welcome
	19.6阿里镜像
	<mirror>
		<id>nexus-aliyun</id>
		<mirrorOf>*</mirrorOf>
		<name>Nexus aliyun</name>
		<url>http://maven.aliyun.com/nexus/content/groups/public</url>
	</mirror>

20，<packaging>jar</packaging>
	如果packaging是war需要build配置：
	<plugin>
		<groupId>org.apache.maven.plugins</groupId>
		<artifactId>maven-war-plugin</artifactId>
		<version>2.4</version>
		<configuration>
			<failOnMissingWebXml>false</failOnMissingWebXml>
		</configuration>
	</plugin>

21，-Dmaven.test.skip=true 忽略test	
	21.1 deploy -Dmaven.test.skip=true	忽略test部署
	21.2 install -Dmaven.test.skip=true	忽略test构建

22，全局配置
	22.1设置全局的jdk，在setting.xml文件中的profiles元素下添加如下profile元素
	<profile>
		<id>jdk17</id>  
		<activation>  
			<activeByDefault>true</activeByDefault>  
			<jdk>1.7</jdk>  
		</activation>  
		<properties>  
			<maven.compiler.source>1.7</maven.compiler.source>  
			<maven.compiler.target>1.7</maven.compiler.target>  
			<maven.compiler.compilerVersion>1.7</maven.compiler.compilerVersion>  
		</properties>   
	</profile>

23，局部jdk配置
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
		</plugins>
	</build>