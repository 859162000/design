git相关收集

1，clone
	sudo git clone @git.oschina.net:paladins/code-creator.git
	sudo git clone https://paladins:*@git.oschina.net/paladins/zkclient.git	带用户名密码检出
	sudo git pull	更新

	1.1 github url:https://github.com/lironghai/wanwan.git
		1.1.1 git clone https://lironghai:*@github.com/lironghai/wanwan.git
	1.2 ssh协议 git clone ssh://gitolite@localhost/gitolite-admin.git

2，config
	git config --global user.name 	[wanwang2]
	git config --global user.email 	[lironghai@neusoft.com]

	2.1，config --list
	2.2，修改密码，直接到下载目录 .git文件夹里找config里的下载路径:
		[remote "origin"]
	
		  url = https://wanwang2:*@github.com/wanwang2/log.git
	
		  fetch = +refs/heads/*:refs/remotes/origin/*

3，add上传
	3.1 git init
	3.2 git add .	--将改动添加到本地，需要和.git目录平级
		2.1 git push origin 本地分支

	3.3 git commit -am "###"      --以上3步只是本地提交
		3.1. git remote add origin git@git.oschina.net/paladins/zkclient.git	--只有在远程没有目录时使用
		     git remote add origin http://wanwang2:*@git.oschina.net/name/project.git
		3.2. git push origin 远程分支，需要和.git目录平级

4，git server安装
	4.1 gitolite
	4.1.1 下载 git clone ssh://gitolite@localhost/testing.git
	4.1.2 查看安装是否正常	ssh gitolite@127.0.0.1
	4.1.3 检查		git clone gitolite@127.0.0.1:gitolite-admin

	4.2 gitlab 下载地址:https://about.gitlab.com/downloads/
		4.2.1 访问 http://ip	[root/root1234]
		4.2.2 安装好gitlab后，要将仓库(repositories)放在一个大硬盘上，需要修改仓库对应的目录

		操作步骤：

			4.2.2.1：新建新仓库目录 mkdir -p /mnt/application/gitlab/git-data
			4.2.2.2：修改配置文件	sudo vi /etc/gitlab/gitlab.rb
				 搜索		git_data_dir 修改成：git_data_dir "新目录"
				 如		git_data_dir "/mnt/application/gitlab/git-data"并保存
			4.2.2.3：重新生成gitlab sudo gitlab-ctl reconfigure
				 生成不报错，而且在新建仓库目录可以看到从下的目录，即修改成功 gitlab-satellites repositories

5，分支与合并
	5.1 origin	默认远程版本库
		git push origin master:master――将本地的 master 分支推送至远端的 master 分支
		
	5.2 在git中，可以使用git merge 和git rebase两个命令来进行分支的合并
		$ git merge branchname	这个命令把分支"branchname"合并到了当前分支里面
	5.3 $ git diff差异查询
	
6，撤销相关
	6.1 撤销本地提交
		git reset --hard commitId	撤销某commitId的提交记录
		git log	查看commitId
		
	6.2 git checkout --<filename>	用head区的文件替换工作目录的文件, 添加到缓存区的文件不受影响
	
7，git本地分区
	7.1 工作目录
	7.2 暂存区
	7.3 head区
	